{"version":3,"sources":["settings-boxes/activities/ActivitiesBoxDataContainer.tsx","Components/NavBar/NavBar.tsx","Components/Icon/Icon.tsx","settings-boxes/activities/ActivitiesBoxView.tsx","assets/ContrasteAzulOscuro.jpg","assets/captura.jpg","simulator/SimuladorView.tsx","simulator/SimulatorScreen.tsx","routers/AppRouter.tsx","OpenShsApp.tsx","index.tsx"],"names":["OptionsTabs","TabIdentifiers","NavBar","className","Icon","icon","ActivitiesBoxView","activityLabels","handleSubmitLabels","markedTexts","renderPythonButtons","renderPythonSignals","useState","counter","setCounter","ACTIVITIES","tabIdentifier","setTabIdentifier","handleRemoveField","div","document","getElementById","element","removeChild","handleGenerateCode","inputs","getElementsByTagName","handleChangeTab","e","i","length","item","value","target","id","OBTR_LEVELS","lineNumbers","useEffect","codeLines","pythonDiv","max","push","handleRenderLineNumbers","placeholder","onClick","createElement","setAttribute","field","btn","onclick","span","textContent","appendChild","focus","preventScroll","map","line","index","text","navigator","clipboard","writeText","ActivitiesBoxDataContainer","userLabels","setUserLabels","colorClass","labels","tab","label","variableDeclaration","signallCall","SimuladorView","src","imagenSimulador","alt","width","height","imagenCasa","SimulatorScreen","AppRouter","OpenShsApp","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.fef6f6bb.chunk.js","sourcesContent":["import { FC, useState } from \"react\";\r\nimport ActivitiesBoxView from \"./ActivitiesBoxView\";\r\n\r\nexport enum OptionsTabs {\r\n    ACTIVITIES = 'activities',\r\n    CONTEXTS = 'contexts',\r\n    COLUMNS = 'columns',\r\n    OBTR_LEVELS = 'levels'\r\n}\r\n\r\nexport enum TabIdentifiers {\r\n    ACTIVITIES = 1,\r\n    OBTR_LEVELS = 2,\r\n}\r\n\r\ntype ActivityBoxProps = {\r\n\r\n}\r\n\r\nconst ActivitiesBoxDataContainer: FC<ActivityBoxProps> = ({}) => {\r\n\r\n    const [userLabels, setUserLabels] = useState<string[]>([]);\r\n\r\n    const handleSubmitLabels = (inputs: any) =>{\r\n        let labels: string[] = [];\r\n        for (let i = 0; i < inputs.length; i++) {\r\n            const element = inputs.item(i);\r\n            if (element!.value !== '') {\r\n                labels.push(element!.value);\r\n            }\r\n        }\r\n        setUserLabels(labels);\r\n        return\r\n    }\r\n\r\n    const markedTexts = (text: string, colorClass?: string): React.ReactNode => {\r\n        if (colorClass!) {\r\n            return (<b className={colorClass}>{text}</b>)\r\n        } else {\r\n            return (<b><i>{text}</i></b>)\r\n        }\r\n    }\r\n\r\n    const renderPythonButtons = (tab?: TabIdentifiers): React.ReactNode => {\r\n\r\n        return (\r\n            <>\r\n                {userLabels.map((label, index) => {\r\n                    let variableDeclaration: string = `self.${label}_btn `;\r\n                    let functionCall: string = 'bgui.FrameButton(';\r\n                    let parameterFrame: string = 'self.frame';\r\n                    let parameterText: string = 'text';\r\n                    let parameterSize: string = 'size';\r\n                    let parameterPos: string = 'pos';\r\n                    let parameterEndFunction: string = ')';\r\n\r\n                    return (\r\n\r\n                        <div className={'lines lines__in-code'}>\r\n                            <p>{markedTexts(variableDeclaration, 'variable_code')}</p>\r\n                            <p>={markedTexts(functionCall, 'function_code')}</p>\r\n                            <p>{markedTexts(parameterFrame, 'variable_code')},{' '}</p>\r\n                            <p>{markedTexts(parameterText, 'variable_code')}{'='}</p>\r\n                            <p>{`'${label}'`},{' '}</p>\r\n                            <p>{markedTexts(parameterSize, 'variable_code')}{'=[0.1, 0.05]'},{' '}</p>\r\n                            <p>{markedTexts(parameterPos, 'variable_code')}{tab === TabIdentifiers.ACTIVITIES ? `=[0.90, ${0.95-(0.5*index)}]` : `=[0.90, ${0.55-(0.5*index)}]`}</p>\r\n                            <p>{markedTexts(parameterEndFunction, 'function_code')}{'\\n'}</p>\r\n\r\n                        </div>\r\n                    )\r\n                })\r\n                }\r\n            </>\r\n        )\r\n\r\n        \r\n\r\n    }\r\n\r\n    const renderPythonSignals = (tab?: number) => {\r\n\r\n        return (\r\n            <>\r\n                {userLabels.map((label)=>{\r\n                    let variableDeclaration: string = `self.${label}_btn.on_click` ;\r\n                    let signalReference = `self.`;\r\n                    let signallCall = `set_${tab === TabIdentifiers.ACTIVITIES ? 'activity' : 'label'}_click`;\r\n\r\n                    return (\r\n\r\n                        <div className={'lines lines__in-code'}>\r\n                            <p>{markedTexts(variableDeclaration, 'variable_code')}=</p>\r\n                            <p>{markedTexts(signalReference, 'variable_code')}</p>\r\n                            <p>{markedTexts(signallCall, 'function_code')}{'\\n'}</p>\r\n\r\n                        </div>\r\n                    )\r\n                })\r\n                }\r\n            </>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <ActivitiesBoxView\r\n            activityLabels={userLabels}\r\n            handleSubmitLabels={handleSubmitLabels}\r\n            markedTexts={markedTexts}\r\n            renderPythonButtons={renderPythonButtons}\r\n            renderPythonSignals={renderPythonSignals}\r\n        />\r\n    )\r\n}\r\n\r\nexport default ActivitiesBoxDataContainer","import { FC } from \"react\";\r\nimport './NavBar.scss'\r\n\r\n\r\nexport const NavBar: FC<{}> = () => {\r\n    return (\r\n        <div className={'navbar'}>\r\n            <div className={'navbar-header'}>\r\n                <div className={'navbar__openshs-link'}>\r\n                    OpenSHS\r\n                </div>\r\n                <div className={'navbar__openshs-login'}>\r\n                    <button>\r\n                        LOG IN\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            <div className={'navbar-body'}>\r\n                <div className={'navbar-body__text'}>\r\n                    <h4>Welcome to the configuration wizard for Open Smart Home Simulator</h4>\r\n                    <p>Following, there is some information about the project now and where it is headed</p>\r\n                    <p>You can have a read on it or go straight to the action pressing START!</p>\r\n                </div>\r\n            </div>\r\n            <div className={'navbar-footer'}>\r\n                <button>\r\n                    START!\r\n                </button>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}","import { FC } from \"react\";\r\nimport 'material-icons/iconfont/material-icons.scss';\r\n\r\ntype Props  = {\r\n    icon: string,\r\n}\r\n\r\nconst Icon: FC<Props> = ({icon}) => {\r\n    return (\r\n        <span className={'material-icons icon'}>\r\n            {icon}\r\n        </span>\r\n    )\r\n}\r\n\r\nexport default Icon","import React, { FC, MouseEvent, ReactNode, useEffect, useState } from \"react\";\r\nimport './ActivitiesBoxView.scss';\r\nimport 'material-icons/iconfont/material-icons.scss';\r\nimport Icon from \"../../Components/Icon/Icon\";\r\nimport { OptionsTabs, TabIdentifiers } from \"./ActivitiesBoxDataContainer\";\r\n\r\n\r\n\r\ntype ActivitiesBoxViewProps = {\r\n    activityLabels: string[],\r\n    handleSubmitLabels: (labels: any) => void,\r\n    markedTexts: (value: string, colorClass?: string) => React.ReactNode,\r\n    renderPythonButtons: (tab?: TabIdentifiers) => React.ReactNode\r\n    renderPythonSignals: (tab?: TabIdentifiers) => React.ReactNode\r\n}\r\n\r\nconst ActivitiesBoxView: FC<ActivitiesBoxViewProps> = ({\r\n    activityLabels,\r\n    handleSubmitLabels,\r\n    markedTexts,\r\n    renderPythonButtons,\r\n    renderPythonSignals\r\n}) => {\r\n\r\n    const comment1 = '#This are the lines to add the buttons';\r\n    const comment2 = '#This are the lines to set the signals'\r\n\r\n    const [counter, setCounter] = useState(1);\r\n\r\n    const [tabIdentifier, setTabIdentifier] = useState<TabIdentifiers>(TabIdentifiers.ACTIVITIES);\r\n\r\n    const handleAddField = () => {\r\n        const div = document.createElement('div');\r\n        div.setAttribute(\"class\", \"added-field\")\r\n        div.setAttribute(\"id\", `added-field-${counter}`)\r\n\r\n        const field = document.createElement('input');\r\n        field.setAttribute(\"placeholder\", \"Activity name\");\r\n        field.setAttribute(\"id\", `added-input-${counter}`);\r\n        const btn = document.createElement('button');\r\n        btn.setAttribute(\"class\", \"field-btn field-btn__remove\");\r\n        btn.setAttribute(\"onClick\", \"handleRemoveField\");\r\n        btn.setAttribute(\"id\", `${counter}`);\r\n        btn.onclick = handleRemoveField;\r\n\r\n        const span = document.createElement('span');\r\n        span.setAttribute(\"class\", \"material-icons-outlined\");\r\n        span.textContent = 'remove';\r\n\r\n        btn.appendChild(span);\r\n\r\n        div.appendChild(field);\r\n        div.appendChild(btn);\r\n\r\n        document.getElementById('fieldArray')!.appendChild(div)\r\n        document.getElementById(`added-input-${counter}`)?.focus({ preventScroll: false });\r\n\r\n        setCounter(counter + 1);\r\n        return\r\n    }\r\n\r\n    const handleRemoveField = () => {\r\n        const div = document.getElementById('fieldArray')!;\r\n        const element = document.getElementById(`added-field-${counter}`)!\r\n        div.removeChild(element);\r\n        setCounter(counter - 1);\r\n    }\r\n\r\n    const handleGenerateCode = () => {\r\n        const inputs = document.getElementsByTagName('input');\r\n\r\n        handleSubmitLabels(inputs);\r\n\r\n    }\r\n\r\n    const handleChangeTab = (e: any) => {\r\n        const inputs = document.getElementsByTagName('input');\r\n        for (let i = 0; i < inputs.length; i++) {\r\n            inputs.item(i)!.value = '';\r\n        }\r\n\r\n        switch (e.target.id) {\r\n            case OptionsTabs.ACTIVITIES:\r\n                setTabIdentifier(TabIdentifiers.ACTIVITIES);\r\n                break;\r\n            case OptionsTabs.OBTR_LEVELS:\r\n                setTabIdentifier(TabIdentifiers.OBTR_LEVELS);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        handleGenerateCode();\r\n    }\r\n\r\n    const onCopyToClipboard = () => {\r\n        const copiedDiv = document.getElementById('code-textbox');\r\n        const text = copiedDiv!.textContent!;\r\n        navigator.clipboard.writeText(text);\r\n\r\n    }\r\n\r\n    let lineNumbers: string[] = [];\r\n    const handleRenderLineNumbers = () => {\r\n        const pythonDiv = document.getElementById('python-div');\r\n        let codeLines;\r\n        if (pythonDiv !== null) {\r\n            codeLines = pythonDiv!.getElementsByTagName('p');\r\n            const max = codeLines ? codeLines.length : 6;\r\n            for (let i = 0; i < max; i++) {\r\n                lineNumbers.push('');\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        handleRenderLineNumbers();\r\n    }, [document]);\r\n\r\n    return (\r\n        <div className={'activities-container'}>\r\n            <h1>How to customize activities</h1>\r\n            <p className={'instructions'}>{`1. Set as many activities you want to add.`}</p>\r\n            <p className={'instructions'}>{`2. Insert a name for each activity, this name will be shown in the button text.`}</p>\r\n            <p className={'instructions'}>{`3. Generate the code and paste it in the `}{markedTexts('ui.py')}{` file, that is found in the `}{markedTexts('[simulator-root]/app/blender')}{' folder'}</p>\r\n            <div className={'activities-div'}>\r\n                <div className={'form-col'}>\r\n                    <div className={'activities-form'} id={'fieldArray'}>\r\n\r\n                        <div className={'added-field'} id={'added-field-0'}>\r\n                            <input placeholder={'Activity name'} />\r\n                            <button className={'field-btn'} onClick={handleAddField}><Icon icon={'add'} /></button>\r\n                        </div>\r\n                    </div>\r\n                    <button className={'generate-button'} onClick={handleGenerateCode}>Generate code<Icon icon={'source'} /></button>\r\n                </div>\r\n                <div className={'code-box'}>\r\n                    <div className={'code-container'}>\r\n                        <div className={'code-textbox code-textbox__line-numbers'}>\r\n                            <span className={'lines lines__numbers'}>\r\n                                {1}\r\n                            </span>\r\n                            {activityLabels.map((line, index) => {\r\n\r\n                                return (\r\n                                    <span className={'lines lines__numbers'}>\r\n                                        {index + 2}\r\n                                    </span>\r\n                                )\r\n\r\n                            })\r\n                            }\r\n                            <span className={'lines lines__numbers'}>\r\n                                {activityLabels.length + 2}\r\n                            </span>\r\n                            {activityLabels.map((line, index) => {\r\n\r\n                                return (\r\n                                    <span className={'lines lines__numbers'}>\r\n                                        {activityLabels.length + index + 3}\r\n                                    </span>\r\n                                )\r\n\r\n                            })\r\n                            }\r\n\r\n                        </div>\r\n                        <div className={'code-textbox__inside'}>\r\n                            <div className={'tabs-container'}>\r\n                                <span\r\n                                    className={`tab ${tabIdentifier === TabIdentifiers.ACTIVITIES ? 'selected' : ''}`}\r\n                                    id={OptionsTabs.ACTIVITIES}\r\n                                    onClick={(e) => handleChangeTab(e)}\r\n                                >\r\n                                    Activities\r\n                                </span>\r\n                                <span\r\n                                    className={`tab ${tabIdentifier === TabIdentifiers.OBTR_LEVELS ? 'selected' : ''}`}\r\n                                    id={OptionsTabs.OBTR_LEVELS}\r\n                                    onClick={(e) => handleChangeTab(e)}\r\n                                >\r\n                                    Obstrusivity\r\n                                </span>\r\n                                <span className={'tab-container-background'}></span>\r\n                            </div>\r\n                            <div className={'code-textbox'} id={'code-textbox'}>\r\n                                <div className={'lines lines__in-code'}>\r\n                                    <p>{markedTexts(comment1, 'comment_code')}{'\\n'}</p>\r\n                                </div>\r\n                                {\r\n                                    renderPythonButtons(tabIdentifier)\r\n                                }\r\n                                <div className={'lines lines__in-code'}>\r\n                                    <p>{markedTexts(comment2, 'comment_code')}{'\\n'}</p>\r\n                                </div>\r\n                                {\r\n                                    renderPythonSignals(tabIdentifier)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <button className={'copy-btn'} onClick={onCopyToClipboard}>Copy to Clipboard <Icon icon={'content_copy'} /></button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ActivitiesBoxView;","export default __webpack_public_path__ + \"static/media/ContrasteAzulOscuro.44ebd0ca.jpg\";","export default __webpack_public_path__ + \"static/media/captura.ca465339.jpg\";","import { FC } from \"react\";\r\nimport Config from \"../Config\";\r\nimport ActivitiesBoxDataContainer from \"../settings-boxes/activities/ActivitiesBoxDataContainer\";\r\nimport './SimuladorView.scss';\r\nimport imagenCasa from '../assets/ContrasteAzulOscuro.jpg';\r\nimport imagenSimulador from '../assets/captura.jpg';\r\n\r\ntype SimuladorViewProps = {\r\n\r\n}\r\n\r\n\r\nexport const SimuladorView: FC<SimuladorViewProps> = () => {\r\n    return (\r\n        <div className={'main-container'}>\r\n            <div className={'main-row'}>\r\n                <div className={'left-col'}>\r\n                    <h4>First go first</h4>\r\n                    <p>{`This is a final degree project website, which presents a settings tool for\r\n                        Open Smart Home Simulator. The long-term aim is to implement an online\r\n                        version of the simulator that could be configured and used by researchers\r\n                        all around the world, setting different contexts, user activities and the obstrusivity\r\n                        level desired by the home inhabitants in each simulated situation, this last part\r\n                        is thanks to the labeling extension also added in the simulator in this project.\r\n                        Therefore, this project is a solution to the issues within the Ambient Intelligence\r\n                        research field to find wide, specific and detailed data corpus to be used in\r\n                        machine learning processes and other developments.`}</p>\r\n                    <img src={imagenSimulador} alt={'Picture of the activities screen from the simulator'} width={600} height={300}></img>\r\n                </div>\r\n                <div className={'right-col'}>\r\n                    <img src={imagenCasa} alt={'Picture of the simulated house from inside'} width={600} height={300}></img>\r\n                    <h4>\"Ok but... What am I looking at?\"</h4>\r\n                    <p>{`At this moment, the website itself is a tool to configure the main settings of the\r\n                    simulator, it generates the appropriate code lines for each file so you can\r\n                    customize the simulator as you need to get your own datasets after each\r\n                    simulation. The only thing you need to do is introduce your desired contexts,\r\n                    activities, obstrusivity levels and python code will be generated for you to paste\r\n                    it in the right files, yes, that's all!. As was said above, the goal is to find an\r\n                    usable and scalable solution to embeb the simulator in the web so, in the future your changes would automatically\r\n                    apply to its configuration and then you could run it online.`}</p>\r\n                </div>\r\n            </div>\r\n            <div className={'separator'}>\r\n                <span></span>\r\n                <span></span>\r\n            </div>\r\n            <ActivitiesBoxDataContainer />\r\n        </div>\r\n    )\r\n}","import { FC } from \"react\";\r\nimport { SimuladorView } from \"./SimuladorView\";\r\n\r\n\r\n\r\nexport const SimulatorScreen: FC<{}> = () => {\r\n    return (\r\n        <SimuladorView/>\r\n    )\r\n}","import { BrowserRouter as Router, Route, Switch } from \"react-router-dom\"\r\nimport { NavBar } from \"../Components/NavBar/NavBar\"\r\nimport { SimulatorScreen } from \"../simulator/SimulatorScreen\"\r\n\r\n\r\n\r\nexport const AppRouter = () => {\r\n    return (\r\n        <Router>\r\n            <Switch>\r\n                <Route>\r\n                    <NavBar/>\r\n                    <SimulatorScreen/>\r\n                </Route>\r\n            </Switch>\r\n        </Router>\r\n    )\r\n}","import React from 'react';\nimport { AppRouter } from './routers/AppRouter';\n\nexport const OpenShsApp = () => {\n  return (\n      <AppRouter/>\n  )\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { OpenShsApp } from './OpenShsApp';\r\n\r\nimport './styles/styles.scss';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <OpenShsApp />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}